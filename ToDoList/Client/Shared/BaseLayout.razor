@inject NavigationManager NavManager
@inject CustomStateProvider Auth
@inject IUserService IUser
@using ToDoList.Client.Extensions;

<div class="page">
    <div class="sidebar">
        <NavMenu Links="@Links"/>
    </div>
    <main>
        <div class="top-row">
            <AuthorizeView>
                <Authorized>
                    <NavLink class="btn btn-link" href="/user/details"> Hello, @name!</NavLink>
                    <button class="btn btn-link" @onclick="LogoutClick">Logout</button>
                </Authorized>
                <NotAuthorized>
                    <NavLink class="nav-link btn btn-link" href="/register">Register</NavLink>
                    <NavLink class="nav-link btn btn-link" href="/login">Login</NavLink>
                </NotAuthorized>
            </AuthorizeView>
        </div>
        <article class="content px-4">
            @ChildContent
        </article>
    </main>
</div>

@code{
    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }

    [Parameter]
    public IEnumerable<(string cssClass, string href, string name)> Links { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    async Task LogoutClick()
    {
        NavManager.NavigateTo("/login");
        await Auth.Logout();
    }

    string? name;
    protected override async Task OnParametersSetAsync()
    {
        var claims = (await authStateTask).User;
        if(claims.Identity.IsAuthenticated)
            name = (await IUser.GetUserAsync(claims.GetUserId())).UserName;
    }
}