@page "/user/edit-password"
@page "/users/{UserId}/edit-password"
@using System.ComponentModel.DataAnnotations
@using ToDoList.Client.Extensions
@inject NavigationManager NavManager
@inject IUserService IUser 
@attribute [Authorize]

<h3>User</h3>
<hr />
<h3>@Action()</h3>
<br />
<Loader IsLoading="isLoading">
    <ShowError Error="@error">
        <FormValidator Model="password" OnValidSubmit="HandleValidSubmit" Action="@Action()" BackTo="@backTo">
            @if (mode == Mode.Edit)
            {
                <InputPasswordValidator @bind-Value="password.OldPassword" For="@(() => password.OldPassword)" /><br />
            }
            <InputPasswordValidator @bind-Value="password.NewPassword" For="@(() => password.NewPassword)" /><br />
            <InputPasswordValidator @bind-Value="password.ConfirmNewPassword" For="@(() => password.ConfirmNewPassword)" /><br />
        </FormValidator>
    </ShowError>
</Loader>

@code {
    string? error;
    bool isLoading = true;
    bool isAdmin;

    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }

    [Parameter]
    public string UserId { get; set; }

    ChangePassword password = new();

    Mode mode;

    string backTo => isAdmin ? $"/users/{UserId}/details" : "/user/details";

    string Action() => $"{mode.ToString()} Password";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var claims = (await authStateTask).User;
            isAdmin = claims.IsInRole(Roles.Admin);

            if(isAdmin && string.IsNullOrEmpty(UserId))
                NavManager.NavigateTo(backTo);
            else if(!isAdmin)
                UserId = claims.GetUserId();

            mode = await IUser.HasUserPasswordAsync(UserId) ? Mode.Edit : Mode.Create;
            isLoading = false;
        }
        catch
        {
            NavManager.NavigateTo(backTo);
        }
    }

    async Task HandleValidSubmit()
    {
        error = null;
        try
        {
            if(mode == Mode.Edit)
                await IUser.ChangeUserPasswordAsync(new(UserId, password));
            else
                await IUser.AddUserPasswordAsync(new(UserId, password));

            NavManager.NavigateTo(backTo);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
