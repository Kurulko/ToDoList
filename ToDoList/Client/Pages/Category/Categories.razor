@page "/categories"
@inject ICategoryService ICategory
@attribute [Authorize]
@using ToDoList.Client.Extensions;

<h3>Categories</h3>
<hr />
@if (!isCreate)
{
    <button class="btn btn-outline-primary" @onclick="@(() => isCreate = !isCreate)">Create</button>
}
else
{
    <div class="row">
        <div class="col-md-9">
            <ShowError Error="@error">
                <FormValidator Model="category" Action="Create" BackTo="@null" OnValidSubmit="@(async () => {
                            await CreateCategory();
                            if(error is null)
                                isCreate = !isCreate;
                            await SetCategoriesAsync();
                        })">
                    <InputTextValidator @bind-Value="category.Name" For="@(() => category.Name)" />
                </FormValidator>
            </ShowError>
            <button class="btn btn-outline-warning" @onclick="@(() => isCreate = !isCreate)">Cancel</button>
        </div>
    </div>

}

<br />
<Loader IsLoading="isLoading">
    @if (!string.IsNullOrEmpty(searchValue) || temporaryData.CountOrDefault() != 0)
    {
        <div class="row">
            <div class="col-md-3"></div>
            <div class="col-md-9">
                <SearchFilter @bind-Models="temporaryData" @bind-Search="@searchValue" Data="@categories"
                          FilterDirection="@((Category c) => c.Name)" Placeholder="Search by name" />
            </div>
        </div>
        <br />
    }

    <FilterTable RowData="@categories" PageSize="10" @bind-TemporaryData="@temporaryData" Sorts="@sorts">
        <HeaderBodyEnd><th></th></HeaderBodyEnd>
        <RowBody Context="c">
            <td>
                @{
                    long categoryId = c.Id;
                }
                @if (!isEdit[categoryId])
                {
                    @c.Name
                }
                else
                {
                    <ShowError Error="@error">
                        <FormValidator Model="c" Action="Edit" BackTo="@null" OnValidSubmit="@(async () => {
                            await EditCategory(c);
                            if(error is null)
                                isEdit[categoryId] = !isEdit[categoryId];
                            await SetCategoriesAsync();
                        })">
                            <InputTextValidator @bind-Value="c.Name" For="@(() => c.Name)" />
                        </FormValidator>
                    </ShowError>
                    <button class="btn btn-outline-warning" @onclick="@(() => isEdit[categoryId] = !isEdit[categoryId])">Cancel</button>

                }
            </td>
            <td>
                @if (!isEdit[categoryId])
                {
                    <button class="btn btn-outline-warning" @onclick="@(() => isEdit[categoryId] = !isEdit[categoryId])">
                        Edit
                    </button>
                }
                <button class="btn btn-outline-danger" @onclick="@(async() => await DeleteCategory(c.Id))">
                    Delete
                </button>
            </td>
        </RowBody>
    </FilterTable>
</Loader>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }

    IEnumerable<Category> categories;

    IEnumerable<Category> temporaryData = Enumerable.Empty<Category>();

    IEnumerable<SortModel<Category>> sorts;

    string? searchValue;
    bool isLoading = true;

    string userId;
    string? error;

    protected override async Task OnParametersSetAsync()
    {
        sorts = new List<SortModel<Category>>() { new(m => m.Name, "Name") };
        userId = (await authStateTask).User.GetUserId();
        await SetCategoriesAsync();
        isLoading = false;
    }

    async Task SetCategoriesAsync()
    {
        temporaryData = categories = await ICategory.GetCategoriesAsync(userId);
        isEdit = categories.ToDictionary(k => k.Id, v => false);
    }

    Dictionary<long, bool> isEdit;
    async Task EditCategory(Category category)
    {
        error = null;
        try
        {
            await ICategory.UpdateCategoryAsync(userId, category);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    bool isCreate = false;
    Category category = new();
    async Task CreateCategory()
    {
        error = null;
        try
        {
            await ICategory.AddCategoryAsync(userId, category);
            category = new();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    async Task DeleteCategory(long id)
    {
        try
        {
            await ICategory.DeleteCategoryAsync(userId, id);
            await SetCategoriesAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
