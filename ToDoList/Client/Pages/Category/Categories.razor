@page "/categories"
@page "/{UserId}/categories"
@inject NavigationManager NavManager
@inject ICategoryService ICategory
@attribute [Authorize]
@using ToDoList.Client.Extensions;
@using System.Text.RegularExpressions

<h3>Categories</h3>
<hr />
<Loader IsLoading="isLoading">
    <SimpleDataEdit @bind-Models="categories" TemporaryData="temporary" SetModelsAsync="@GetCategoriesAsync" GetName="@((Category c) => c.Name)" GetId="@((Category c) => c.Id)" Sorts="@sorts"
            EditModelHandle="EditCategory" CreateModelHandle="CreateCategory" DeleteModelHandle="DeleteCategory" TypeId="long" TypeModel="Category">
        <EditFragment Context="c">
            <InputTextValidator @bind-Value="c.Name" For="@(() => c.Name)" />
       </EditFragment>
        <ContentAfterCreateBeforeEdit>
            @if (!string.IsNullOrEmpty(searchText) || categories.CountOrDefault() != 0)
            {
                <div class="row">
                    <div class="col-md-3"></div>
                    <div class="col-md-9">
                        <SearchFilter @bind-SearchText="@searchText" Placeholder="@("Search by name")" />
                  </div>
                </div>
                <br />
            }
        </ContentAfterCreateBeforeEdit>
    </SimpleDataEdit>
</Loader>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }
    
    [Parameter]
    public string UserId { get; set; }

    IEnumerable<Category> categories = Enumerable.Empty<Category>();
    IEnumerable<Category> temporary = Enumerable.Empty<Category>();

    IEnumerable<SortModel<Category>> sorts = new List<SortModel<Category>>() { new(m => m.Name, "Name") };

    bool isLoading = true;
    bool isAdmin;

    protected override async Task OnParametersSetAsync()
    {
        var claims = (await authStateTask).User;
        isAdmin = claims.IsInRole(Roles.Admin);

        if(isAdmin && string.IsNullOrEmpty(UserId))
            NavManager.NavigateTo("users");
        else if(!isAdmin)
            UserId = claims.GetUserId();

        temporary = categories = await GetCategoriesAsync();
        isLoading = false;
    }

    async Task<IEnumerable<Category>> GetCategoriesAsync()
        => await ICategory.GetCategoriesAsync(UserId);

    async Task EditCategory(Category category)
        => await ICategory.UpdateCategoryAsync(new(UserId, category));

    async Task CreateCategory(Category category)
        => await ICategory.AddCategoryAsync(new(UserId, category));

    async Task DeleteCategory(long id)
        => await ICategory.DeleteCategoryAsync(UserId, id);

    string? searchText;
    protected override bool ShouldRender()
    {
        temporary = string.IsNullOrEmpty(searchText) ? categories 
            : categories.Where(IsValidForSearchText).ToList();
        return true;
    }
    bool IsValidForSearchText(Category category)
    {
        Regex reg = new($".*{searchText}.*", RegexOptions.IgnoreCase);
        return reg.IsMatch(category.Name);
    } 
}
