@page "/to-do-list/details/{ToDoItemId:long}"
@page "/{UserId}/to-do-list/details/{ToDoItemId:long}"
@using ToDoList.Shared.Models.Db
@using ToDoList.Shared.Services
@using ToDoList.Client.Extensions
@inject IToDoItemService IToDoItem
@inject ICategoryService ICategory
@inject NavigationManager NavManager
@attribute [Authorize]

<h3>ToDoItem</h3>
<hr />
<h3>Details</h3>
<br />
<Loader IsLoading="isLoading">
    <table class="table">
        <tbody>
            <tr>
                <th>Name</th>
                <td>@toDoItem.Name</td>
            </tr>
            <tr>
                <th>Category</th>
                <td>@toDoItem.Category.Name</td>
            </tr>
            <tr>
                <th>Priority</th>
                <td>@toDoItem.Priority</td>
            </tr>
            <tr>
                <th>Deadline</th>
                <td>@toDoItem.Deadline</td>
            </tr>
            <tr>
                <th>Complication</th>
                <td>@toDoItem.Complication</td>
            </tr>
            <tr>
                <th>Is Completed?</th>
                <td>
                    @(toDoItem.IsCompleted ? "Yes" : "No")
                    <button class="btn btn-outline-warning" @onclick="ChangeIsCompleted">Change</button>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <NavLink href="@pathToEdit" class="btn btn-outline-warning">Edit</NavLink>
                    <button class="btn btn-outline-danger" @onclick="DeleteToDoItem">Delete</button>
                </td>
            </tr>
        </tbody>
    </table>
</Loader>
<br />
<NavLink href="@backTo" class="btn btn-outline-info">Back</NavLink>


@code {
    [Parameter]
    public long ToDoItemId { get; set; }

    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }

    [Parameter]
    public string UserId { get; set; }

    ToDoItem? toDoItem = new();
    bool isLoading = true;
    bool isAdmin;

    string pathForAdmin() => isAdmin ? UserId : string.Empty;
    string backTo => $"{pathForAdmin()}/to-do-list";
    string pathToEdit => $"{pathForAdmin()}/to-do-list/edit/{ToDoItemId}";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var claims = (await authStateTask).User;
            isAdmin = claims.IsInRole(Roles.Admin);

            if(!isAdmin)
                UserId = (await authStateTask).User.GetUserId();

            toDoItem = await IToDoItem.GetToDoItemAsync(UserId, ToDoItemId);
            toDoItem.Category = await ICategory.GetCategoryAsync(UserId, toDoItem.CategoryId);

            isLoading = false;
        }
        catch
        {
            NavManager.NavigateTo(backTo);
        }
    }

    async Task ChangeIsCompleted()
    {
        toDoItem.IsCompleted = !toDoItem.IsCompleted;
        await IToDoItem.UpdateToDoItem(new(UserId, toDoItem));
    }

    async Task DeleteToDoItem()
    {
        await IToDoItem.DeleteToDoItem(UserId, ToDoItemId);
        NavManager.NavigateTo(backTo);
    }
}
