@using System.Text.RegularExpressions
@using ToDoList.Client.Extensions
@inject IToDoItemService IToDoItem
@inject ICategoryService ICategory

<Loader IsLoading="isLoading">
    @if (!string.IsNullOrEmpty(searchText) || searchSelect != 0 || temporary.CountOrDefault() != 0)
    {
        <div class="row">
            <div class="col-md-3"></div>
            <div class="col-md-9">
                <SearchFilter @bind-SearchText="@searchText" Placeholder="@("Search by name")" />
                <br />
                <SearchSelectFilter @bind-SearchSelect="searchSelect" Values="@(SelectValues())"
                    Parse="@(value => long.Parse(value))" TypeSelect="long" Placeholder="@("Select Category")"/>
          </div>
        </div>
        <br />
    }

    <FilterTable RowData="@temporary" PageSize="7" Sorts="@sorts">
        <HeaderBodyEnd><th></th></HeaderBodyEnd>
        <RowBody Context="m">
            <td>@m.Name</td>
            <td>@m.Category!.Name</td>
            <td>@m.Complication</td>
            <td>@m.Priority</td>
            <td>@m.Deadline.ToString("dd.MM.yyyy hh:mm")</td>
            <td>
                <NavLink href="@(PathToDetails(m.Id))" class="btn btn-outline-info">Details</NavLink>
            </td>
        </RowBody>
    </FilterTable>
</Loader>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }

    [Parameter]
    public Func<IEnumerable<ToDoItem>, IEnumerable<ToDoItem>> Filter { get; set; }

    [Parameter]
    public string UserId { get; set; }

    IEnumerable<SortModel<ToDoItem>> sorts = Enumerable.Empty<SortModel<ToDoItem>>();

    IEnumerable<ToDoItem> toDoList { get; set; } = Enumerable.Empty<ToDoItem>();
    IEnumerable<ToDoItem> temporary { get; set; } = Enumerable.Empty<ToDoItem>();

    IEnumerable<Category> categories { get; set; } = Enumerable.Empty<Category>();

    string? searchText;
    long searchSelect;

    bool isLoading = true;
    bool isAdmin;
    
    string pathForAdmin() => isAdmin ? UserId : string.Empty;
    string PathToDetails(long toDoItemId)
        => $"{pathForAdmin()}/to-do-list/details/{toDoItemId}";

    protected override async Task OnParametersSetAsync()
    {
        sorts = new List<SortModel<ToDoItem>>()
        {
            new(m => m.Name, "Name"),
            new(m => m.CategoryId, "Category"),
            new(m => m.Complication, "Compl"),
            new(m => m.Priority, "Priority"),
            new(m => m.Deadline, "Deadline"),
        };

        var claims = (await authStateTask).User;
        isAdmin = claims.IsInRole(Roles.Admin);

        if(!isAdmin)
         UserId = (await authStateTask).User.GetUserId();

        toDoList = Filter(await IToDoItem.GetToDoItemsAsync(UserId));
        foreach (ToDoItem item in toDoList)
            item.Category = await ICategory.GetCategoryAsync(UserId, item.CategoryId);

        categories = await ICategory.GetCategoriesAsync(UserId);

        temporary = toDoList;
        isLoading = false;
    }

    IEnumerable<SelectValue<long>> SelectValues()
        => categories.Select(c => new SelectValue<long>(c.Id, c.Name));

    protected override bool ShouldRender()
    {
        if(!string.IsNullOrEmpty(searchText))
        {
            temporary = (searchSelect != 0 ? 
                toDoList.Where(m =>  IsValidForSearchSelect(m) && IsValidForSearchText(m)) :
                toDoList.Where(m => IsValidForSearchText(m))).ToList();
        }
        else
        {
            temporary = searchSelect != 0 ? 
               toDoList.Where(IsValidForSearchSelect).ToList() :
               toDoList;
        }
        return true;
    }

    bool IsValidForSearchText(ToDoItem item)
    {
        Regex reg = new($".*{searchText}.*", RegexOptions.IgnoreCase);
        return reg.IsMatch(item.Name);
    } 
    bool IsValidForSearchSelect(ToDoItem item)
        => item.CategoryId == searchSelect;
}
